/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace FestivalRegistry {
  export type FestivalStruct = {
    organizer: AddressLike;
    metadataURI: string;
    startTime: BigNumberish;
    endTime: BigNumberish;
    venue: string;
    exists: boolean;
  };

  export type FestivalStructOutput = [
    organizer: string,
    metadataURI: string,
    startTime: bigint,
    endTime: bigint,
    venue: string,
    exists: boolean
  ] & {
    organizer: string;
    metadataURI: string;
    startTime: bigint;
    endTime: bigint;
    venue: string;
    exists: boolean;
  };
}

export interface FestivalRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "assignSeat"
      | "buyTicket"
      | "claimCheckIn"
      | "createFestival"
      | "getCheckInHandle"
      | "getFestival"
      | "getSeatIndexHandle"
      | "owner"
      | "protocolId"
      | "renounceOwnership"
      | "ticketCollection"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CheckInRecorded"
      | "FestivalCreated"
      | "FestivalTicketDeployed"
      | "OwnershipTransferred"
      | "SeatAssigned"
      | "TicketMinted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "assignSeat",
    values: [BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "buyTicket",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimCheckIn",
    values: [BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createFestival",
    values: [
      BigNumberish,
      string,
      AddressLike,
      BigNumberish,
      BigNumberish,
      string,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getCheckInHandle",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFestival",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSeatIndexHandle",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ticketCollection",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "assignSeat", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyTicket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimCheckIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createFestival",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCheckInHandle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFestival",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSeatIndexHandle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ticketCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace CheckInRecordedEvent {
  export type InputTuple = [ticketId: BigNumberish, festivalId: BigNumberish];
  export type OutputTuple = [ticketId: bigint, festivalId: bigint];
  export interface OutputObject {
    ticketId: bigint;
    festivalId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FestivalCreatedEvent {
  export type InputTuple = [
    festivalId: BigNumberish,
    organizer: AddressLike,
    metadataURI: string
  ];
  export type OutputTuple = [
    festivalId: bigint,
    organizer: string,
    metadataURI: string
  ];
  export interface OutputObject {
    festivalId: bigint;
    organizer: string;
    metadataURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FestivalTicketDeployedEvent {
  export type InputTuple = [festivalId: BigNumberish, ticket: AddressLike];
  export type OutputTuple = [festivalId: bigint, ticket: string];
  export interface OutputObject {
    festivalId: bigint;
    ticket: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SeatAssignedEvent {
  export type InputTuple = [ticketId: BigNumberish, seatIndex: BigNumberish];
  export type OutputTuple = [ticketId: bigint, seatIndex: bigint];
  export interface OutputObject {
    ticketId: bigint;
    seatIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TicketMintedEvent {
  export type InputTuple = [
    festivalId: BigNumberish,
    tokenId: BigNumberish,
    owner: AddressLike
  ];
  export type OutputTuple = [
    festivalId: bigint,
    tokenId: bigint,
    owner: string
  ];
  export interface OutputObject {
    festivalId: bigint;
    tokenId: bigint;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FestivalRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): FestivalRegistry;
  waitForDeployment(): Promise<this>;

  interface: FestivalRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  assignSeat: TypedContractMethod<
    [
      festivalId: BigNumberish,
      ticketId: BigNumberish,
      encSeatIndex: BytesLike,
      inputProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  buyTicket: TypedContractMethod<
    [festivalId: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  claimCheckIn: TypedContractMethod<
    [
      festivalId: BigNumberish,
      ticketId: BigNumberish,
      encCheckedIn: BytesLike,
      inputProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  createFestival: TypedContractMethod<
    [
      festivalId: BigNumberish,
      metadataURI: string,
      organizer: AddressLike,
      startTime: BigNumberish,
      endTime: BigNumberish,
      venue: string,
      deployTicket: boolean
    ],
    [void],
    "nonpayable"
  >;

  getCheckInHandle: TypedContractMethod<
    [ticketId: BigNumberish],
    [string],
    "view"
  >;

  getFestival: TypedContractMethod<
    [festivalId: BigNumberish],
    [FestivalRegistry.FestivalStructOutput],
    "view"
  >;

  getSeatIndexHandle: TypedContractMethod<
    [ticketId: BigNumberish],
    [string],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  ticketCollection: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "assignSeat"
  ): TypedContractMethod<
    [
      festivalId: BigNumberish,
      ticketId: BigNumberish,
      encSeatIndex: BytesLike,
      inputProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "buyTicket"
  ): TypedContractMethod<[festivalId: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "claimCheckIn"
  ): TypedContractMethod<
    [
      festivalId: BigNumberish,
      ticketId: BigNumberish,
      encCheckedIn: BytesLike,
      inputProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createFestival"
  ): TypedContractMethod<
    [
      festivalId: BigNumberish,
      metadataURI: string,
      organizer: AddressLike,
      startTime: BigNumberish,
      endTime: BigNumberish,
      venue: string,
      deployTicket: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getCheckInHandle"
  ): TypedContractMethod<[ticketId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getFestival"
  ): TypedContractMethod<
    [festivalId: BigNumberish],
    [FestivalRegistry.FestivalStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSeatIndexHandle"
  ): TypedContractMethod<[ticketId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "ticketCollection"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "CheckInRecorded"
  ): TypedContractEvent<
    CheckInRecordedEvent.InputTuple,
    CheckInRecordedEvent.OutputTuple,
    CheckInRecordedEvent.OutputObject
  >;
  getEvent(
    key: "FestivalCreated"
  ): TypedContractEvent<
    FestivalCreatedEvent.InputTuple,
    FestivalCreatedEvent.OutputTuple,
    FestivalCreatedEvent.OutputObject
  >;
  getEvent(
    key: "FestivalTicketDeployed"
  ): TypedContractEvent<
    FestivalTicketDeployedEvent.InputTuple,
    FestivalTicketDeployedEvent.OutputTuple,
    FestivalTicketDeployedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SeatAssigned"
  ): TypedContractEvent<
    SeatAssignedEvent.InputTuple,
    SeatAssignedEvent.OutputTuple,
    SeatAssignedEvent.OutputObject
  >;
  getEvent(
    key: "TicketMinted"
  ): TypedContractEvent<
    TicketMintedEvent.InputTuple,
    TicketMintedEvent.OutputTuple,
    TicketMintedEvent.OutputObject
  >;

  filters: {
    "CheckInRecorded(uint256,uint256)": TypedContractEvent<
      CheckInRecordedEvent.InputTuple,
      CheckInRecordedEvent.OutputTuple,
      CheckInRecordedEvent.OutputObject
    >;
    CheckInRecorded: TypedContractEvent<
      CheckInRecordedEvent.InputTuple,
      CheckInRecordedEvent.OutputTuple,
      CheckInRecordedEvent.OutputObject
    >;

    "FestivalCreated(uint256,address,string)": TypedContractEvent<
      FestivalCreatedEvent.InputTuple,
      FestivalCreatedEvent.OutputTuple,
      FestivalCreatedEvent.OutputObject
    >;
    FestivalCreated: TypedContractEvent<
      FestivalCreatedEvent.InputTuple,
      FestivalCreatedEvent.OutputTuple,
      FestivalCreatedEvent.OutputObject
    >;

    "FestivalTicketDeployed(uint256,address)": TypedContractEvent<
      FestivalTicketDeployedEvent.InputTuple,
      FestivalTicketDeployedEvent.OutputTuple,
      FestivalTicketDeployedEvent.OutputObject
    >;
    FestivalTicketDeployed: TypedContractEvent<
      FestivalTicketDeployedEvent.InputTuple,
      FestivalTicketDeployedEvent.OutputTuple,
      FestivalTicketDeployedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SeatAssigned(uint256,uint32)": TypedContractEvent<
      SeatAssignedEvent.InputTuple,
      SeatAssignedEvent.OutputTuple,
      SeatAssignedEvent.OutputObject
    >;
    SeatAssigned: TypedContractEvent<
      SeatAssignedEvent.InputTuple,
      SeatAssignedEvent.OutputTuple,
      SeatAssignedEvent.OutputObject
    >;

    "TicketMinted(uint256,uint256,address)": TypedContractEvent<
      TicketMintedEvent.InputTuple,
      TicketMintedEvent.OutputTuple,
      TicketMintedEvent.OutputObject
    >;
    TicketMinted: TypedContractEvent<
      TicketMintedEvent.InputTuple,
      TicketMintedEvent.OutputTuple,
      TicketMintedEvent.OutputObject
    >;
  };
}
